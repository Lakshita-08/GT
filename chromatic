#include <iostream>
#include <list>
using namespace std;
class Graph
{
    int V;
    list<int> *adj;

public:
    Graph(int V)
    {
        this->V = V;
        adj = new list<int>[V];
    }
    ~Graph() { delete[] adj; }
    void addEdge(int v, int w);
    void greedyColoring();
};
void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w);
    adj[w].push_back(v);
}
void Graph::greedyColoring()
{
    int result[V];
    // Assign the first color to first vertex
    result[0] = 0;
    // Initialize remaining V-1 vertices as unassigned
    for (int u = 1; u < V; u++)
        result[u] = -1; // no color is assigned to u
    bool available[V];
    for (int cr = 0; cr < V; cr++)
        available[cr] = false;
    for (int u = 1; u < V; u++)
    {
        list<int>::iterator i;
        for (i = adj[u].begin(); i != adj[u].end(); ++i)
            if (result[*i] != -1)
                available[result[*i]] = true;
        // Find the first available color
        int cr;
        for (cr = 0; cr < V; cr++)
            if (available[cr] == false)
                break;
        result[u] = cr; // Assign the found color
        // Reset the values back to false for the next iteration
        for (i = adj[u].begin(); i != adj[u].end(); ++i)
            if (result[*i] != -1)
                available[result[*i]] = false;
    }
    int chromaticNu = 0;
    for (int u = 0; u < V; u++)
    {
        if (result[u] + 1 > chromaticNu)
        {
            chromaticNu = result[u] + 1;
        }
        cout << "Vertex " << u << " ---> Color "
             << result[u] + 1 << endl;
    }
    cout << "\nChromatic No is : " << (chromaticNu);
}
int main()
{
    Graph g2(4);
    g2.addEdge(0, 1);
    g2.addEdge(1, 2);
    g2.addEdge(2, 3);
    g2.addEdge(0, 3);
    cout << "\nColoring of graph 1 \n";
    g2.greedyColoring();
    Graph g1(5);
    g1.addEdge(0, 1);
    g1.addEdge(0, 2);
    g1.addEdge(1, 2);
    g1.addEdge(1, 3);
    g1.addEdge(2, 3);
    g1.addEdge(3, 4);
    cout << "\nColoring of graph 2 \n";
    g1.greedyColoring();
    return 0;
}
/*
INPUT
4
0 1
1 2
2 3
3 0
OUTPUT
Coloring of graph 1
Vertex 0 ---> Color 1
Vertex 1 ---> Color 2
Vertex 2 ---> Color 1
Vertex 3 ---> Color 3
Chromatic No is : 3
INPUT
5
0 1
0 2
1 2
1 3
2 3
3 4
OUTPUT
Coloring of graph 2
Vertex 0 ---> Color 1
Vertex 1 ---> Color 2
Vertex 2 ---> Color 3
Vertex 3 ---> Color 1
Vertex 4 ---> Color 2
Chromatic No is : 3
*/
